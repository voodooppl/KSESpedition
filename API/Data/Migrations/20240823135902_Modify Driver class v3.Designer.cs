// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240823135902_Modify Driver class v3")]
    partial class ModifyDriverclassv3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("CNP")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ContractStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfBirt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("DriverLicenceExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DriverLicenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Employer")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("IdNumberExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Log")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TruckId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("TruckId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("API.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Detail")
                        .HasColumnType("TEXT");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Paid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Supplier")
                        .HasColumnType("TEXT");

                    b.Property<int>("TruckId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("JobId");

                    b.HasIndex("TruckId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("API.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Client")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Income")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("KM")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Log")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Profit")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartPoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransportedGoods")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransportingFirm")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("API.Entities.Truck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EngineCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("FabricationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FuelType")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("GermanVignetteExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HorsePower")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("ITPExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("InsurranceExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("KmOnBoard")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LicenceNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Log")
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("NextRevisionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("RoVignetteExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("API.Entities.Driver", b =>
                {
                    b.HasOne("API.Entities.Job", "Job")
                        .WithMany("Drivers")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Entities.Truck", "Truck")
                        .WithMany("Drivers")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Job");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("API.Entities.Expense", b =>
                {
                    b.HasOne("API.Entities.Driver", "Driver")
                        .WithMany("Expenses")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("API.Entities.Job", "Job")
                        .WithMany("Expenses")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("API.Entities.Truck", "Truck")
                        .WithMany("Expenses")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Job");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("API.Entities.Truck", b =>
                {
                    b.HasOne("API.Entities.Job", "Job")
                        .WithMany("Trucks")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Job");
                });

            modelBuilder.Entity("API.Entities.Driver", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("API.Entities.Job", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Expenses");

                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("API.Entities.Truck", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Expenses");
                });
#pragma warning restore 612, 618
        }
    }
}
